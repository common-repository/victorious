<?phpclass VIC_Paypal{	function __construct()	{        $this->is_test = get_option('paypal_test');		$this->paypalmode = get_option('paypal_test') ? ".sandbox" : "";		$this->port = get_option('paypal_test') ? 443 : 80;		$this->url = "https://www".$this->paypalmode.".paypal.com/cgi-bin/webscr";        $this->bn_code = 'FanVictor_SP';	}	    function parseData($values)    {        $aSettings = array('business' => $values['business'],                            'cmd' => "_xclick",                            'item_name' => $values['item_name'],                            'item_number' => $values['item_number'],                            'amount' => $values['amount'],                            'currency_code' => VIC_GetCurrencyCode(),                            'notify_url' => urlencode(stripslashes($values['notify_url'])),                            'return' => urlencode(stripslashes($values['return'])),                            'cancel_return' => urlencode(stripslashes($values['cancel_return'])),							'bn' => $this->bn_code,							'custom' => $values['custom'],                            'no_shipping' => '1',                            'no_note' => '1');        $dataString = null;        foreach($aSettings as $k => $v)        {            $dataString[] = $k."=".$v;        }        $dataString = implode('&', $dataString);        $url = $this->url."?".$dataString;        return $url;    }    public function callback()    {        if(isset($_POST) && $_POST != null)        {            $this->write_log("\n");            if($this->is_test)            {                $this->write_log('Paypal test');            }            else             {                $this->write_log('Paypal real');            }            $this->postback_params = $_POST;                        //listner            $bVerified = $this->listener();            $this->write_log('Paypal verify created');            $this->write_log('Paypal return params: '.json_encode($_POST));            if ($bVerified)            {                $this->write_log('Paypal verify valid');                if (isset($_POST['payment_status']))                {                    $this->write_log('Paypal payment_status: '.$_POST['payment_status']);                    switch($_POST['payment_status'])                    {                        case 'Completed':                            return 'completed';                            break;                        case 'Pending':                            return 'pending';                            break;                        case 'Expired':                            return 'expired';                            break;                        case 'Refunded':                            return 'refunded';                            break;                        case 'Failed':                            return 'failed';                            break;                        case 'Reversed':                            return 'reversed';                            break;                    }                    return $_POST['payment_status'];                }                $this->write_log('Paypal payment_status: no status found');                return false;            }            $this->write_log('Paypal verify invalid');            return false;        }        $this->write_log('Paypal no post data');        return false;    }        private function write_log($log = null)      {        $file = VICTORIOUS__PLUGIN_DIR_MODEL."paypal_log.txt";        if($log != null)        {            $content = '';            if(file_exists($file))            {                $content = file_get_contents($file)."\n";            }            $myfile = fopen(VICTORIOUS__PLUGIN_DIR_MODEL."paypal_log.txt", "w");            fwrite($myfile, $content.$log);            fclose($myfile);        }    }        private function listener()    {        $raw_post_data = file_get_contents('php://input');        $raw_post_array = explode('&', $raw_post_data);        $myPost = array();        foreach ($raw_post_array as $keyval)         {            $keyval = explode('=', $keyval);            if (count($keyval) == 2)            {                $myPost[$keyval[0]] = urldecode($keyval[1]);            }        }        // read the post from PayPal system and add 'cmd'        $req = 'cmd=_notify-validate';        if (function_exists('get_magic_quotes_gpc'))         {            $get_magic_quotes_exists = true;        }                foreach ($myPost as $key => $value)         {            if ($get_magic_quotes_exists == true && get_magic_quotes_gpc() == 1)             {                $value = urlencode(stripslashes($value));            }             else             {                $value = urlencode($value);            }            $req .= "&$key=$value";        }        // Post IPN data back to PayPal to validate the IPN data is genuine        // Without this step anyone can fake IPN data        $ch = curl_init($this->url);        if ($ch == FALSE)         {            return FALSE;        }		        curl_setopt($ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1);        curl_setopt($ch, CURLOPT_POST, 1);        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);        curl_setopt($ch, CURLOPT_POSTFIELDS, $req);        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 1);        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);		//curl_setopt($ch, CURLOPT_CAINFO, VICTORIOUS__PLUGIN_DIR_MODEL."api_cert_chain.crt");        curl_setopt($ch, CURLOPT_FORBID_REUSE, 1);        //curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 30);        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Connection: Close'));		if( !($res = curl_exec($ch)) ) 		{            $this->write_log("Can't connect to PayPal to validate IPN message: ".curl_error($ch));            curl_close($ch);            return FALSE;		}		else 		{			// Log the entire HTTP response if debug is switched on.            $this->write_log("HTTP request of validation request:" . curl_getinfo($ch, CURLINFO_HEADER_OUT) . " for IPN payload: $req" . PHP_EOL);            $this->write_log("HTTP response of validation request: $res" . PHP_EOL);		}		curl_close($ch); 		        // Inspect IPN validation result and act accordingly        if (strcmp($res, "VERIFIED") == 0)         {            if ($this->ipn_log)             {                $this->write_log("Verified IPN: $req " . PHP_EOL);            }            return TRUE;        }         else if (strcmp($res, "INVALID") == 0)         {            // log for manual investigation            // Add business logic here which deals with invalid IPN messages            if ($this->ipn_log)             {                $this->write_log("Invalid IPN: $req" . PHP_EOL);            }            return FALSE;        }    }}class PaypalPro{    function __construct()	{        $this->is_test = get_option('paypal_test');		$this->paypalmode = get_option('paypal_test') ? ".sandbox" : "";		$this->port = get_option('paypal_test') ? 443 : 80;		$this->url = "https://api-3t".$this->paypalmode.".paypal.com/nvp";        $this->api_version = '85.0';        $this->api_username = trim(get_option('victorious_paypal_pro_username'));        $this->api_password = trim(get_option('victorious_paypal_pro_password'));        $this->api_signature = trim(get_option('victorious_paypal_pro_signature'));	}        public function checkout($data)    {        // Store request params in an array		$request_params = array        (            'METHOD' => 'DoDirectPayment',             'USER' => $this->api_username,             'PWD' => $this->api_password,             'SIGNATURE' => $this->api_signature,             'VERSION' => $this->api_version,             'PAYMENTACTION' => 'Sale',                               'IPADDRESS' => sanitize_url($_SERVER['REMOTE_ADDR']),            'CREDITCARDTYPE' => strtoupper($data['CREDITCARDTYPE']),             'ACCT' => $data['ACCT'],                                    'EXPDATE' => $data['EXPDATE'],                       'CVV2' => $data['CVV2'],             'FIRSTNAME' => $data['FIRSTNAME'],             'LASTNAME' => $data['LASTNAME'],             'STREET' => $data['STREET'],             'CITY' => $data['CITY'],             'STATE' => $data['STATE'],            'COUNTRYCODE' => $data['COUNTRYCODE'],            'ZIP' => $data['ZIP'],             'AMT' => $data['AMT'],             'CURRENCYCODE' => VIC_GetCurrencyCode(),             'DESC' => 'asdasd'        );		//print_r($request_params);exit;        // Loop through $request_params array to generate the NVP string.        $nvp_string = '';        foreach($request_params as $var=>$val)        {            $nvp_string .= '&'.$var.'='.urlencode($val);            }        // Send NVP string to PayPal and store response        $args = array(            'body'        => $nvp_string,            'timeout'     => '30',            'redirection' => '5',            'httpversion' => '1.0',            'blocking'    => true,            'headers'     => array(),            'cookies'     => array(),        );        $response = wp_remote_post($this->url, $args);        $result = wp_remote_retrieve_body($response);        // Parse the API response        $nvp_response_array = $this->NVPToArray($result);        $this->write_log("Paypal Pro: " . $nvp_response_array);        switch($nvp_response_array['ACK'])        {            case 'Success':                return array(                    'success' => 1,                    'transactionID' => $nvp_response_array['TRANSACTIONID']                );                break;            case 'Failure':                return array(                    'success' => 0,                    'message' => $nvp_response_array['L_LONGMESSAGE0']                );                break;        }        return array('success' => 0);    }        private function NVPToArray($NVPString)    {        $proArray = array();        while(strlen($NVPString))        {            // name            $keypos= strpos($NVPString,'=');            $keyval = substr($NVPString,0,$keypos);            // value            $valuepos = strpos($NVPString,'&') ? strpos($NVPString,'&'): strlen($NVPString);            $valval = substr($NVPString,$keypos+1,$valuepos-$keypos-1);            // decoding the respose            $proArray[$keyval] = urldecode($valval);            $NVPString = substr($NVPString,$valuepos+1,strlen($NVPString));        }        return $proArray;    }        private function write_log($log = null)      {        $file = VICTORIOUS__PLUGIN_DIR_MODEL."paypal_pro_log.txt";        if($log != null)        {            $content = '';            if(file_exists($file))            {                $content = file_get_contents($file)."\n";            }            $myfile = fopen(VICTORIOUS__PLUGIN_DIR_MODEL."paypal_pro_log.txt", "w");            fwrite($myfile, $content.print_r($log, true));            fclose($myfile);        }    }}?>